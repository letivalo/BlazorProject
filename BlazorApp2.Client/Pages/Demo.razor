@page "/demo"
@rendermode InteractiveAuto

<PageTitle>Project Demo</PageTitle>

@if (isLoading)
{
    <!-- Loading screen -->
    <div class="loading-screen">
        <p>Loading, please wait...</p>
        <img src="/icons/loading-spinner.gif" alt="Loading..." />
    </div>

    <style>
        .loading-screen {
            text-align: center;
            margin-top: 50px;
        }

            .loading-screen p {
                font-size: 20px;
                font-weight: bold;
                margin-bottom: 20px;
            }

            .loading-screen img {
                width: 50px;
                height: 50px;
            }
    </style>
}
else
{
    <!-- Main content -->
    <div class="article">
        <div class="headingcontainer">
            <img src="/icons/projectdemo.svg" class="aboutprojectimg" />
            <h1>To-Do List Demo</h1>
            <h3>(@EntryList.Count(UserEntry => !UserEntry.IsDone)) Tasks Currently In Progress</h3>
        </div>


        <ul>
            <!-- Display each Title and IsDone variable from the Todos list cached locally to the HTML  -->
            @foreach (var UserEntry in EntryList)
            {
                <li @key="UserEntry.ID">
                    <input type="checkbox" checked="@UserEntry.IsDone" @onchange="async (e) => await HandleCheckboxChanged(e, UserEntry)" />
                    <input type="text" @bind="UserEntry.Title"/>
                </li>
            }
        </ul>

    </div>

    @code {
    private async Task HandleCheckboxChanged(ChangeEventArgs e, UserEntryModel UserEntry)
    {
        UserEntry.IsDone = (bool)e.Value!; // Update IsDone manually
        await UpdateTodo(UserEntry); // Call the update method
    }
}

    <input class="createTask" type="text" @bind="UserInput" placeholder="What do you want to do today?" />
    <button @onclick="PostUserEntry">Create Task</button>

}

@code {
    private List<UserEntryModel> EntryList = new();
    private string UserInput = string.Empty;
    private bool isLoading = true; // Track whether the page is still loading

    [Inject] private HttpClient Http { get; set; } = null!;
    [Inject] private NavigationManager Navigation { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadTodosFromDatabase();
        isLoading = false; // Data has been loaded, hide loading screen
    }

    private async Task LoadTodosFromDatabase()
    {
        try
        {
            var baseUrl = Navigation.BaseUri;
            EntryList = await Http.GetFromJsonAsync<List<UserEntryModel>>(baseUrl + "Todos");
            StateHasChanged();
            Console.WriteLine("State Changed.");
            await Task.Yield();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading EntryList for display: {ex.Message}");
        }
    }

    private async Task PostUserEntry()
    {
        if (!string.IsNullOrWhiteSpace(UserInput))
        {
            // Set UserEntrySubmission to equal UserInput + default values
            var UserEntrySubmission = new UserEntryModel { Title = UserInput, IsDone = false };
            try
            {
                var baseUrl = Navigation.BaseUri;
                // Wait for the response from SQL after posting (directory + table + package) 
                var response = await Http.PostAsJsonAsync(baseUrl + "Todos", UserEntrySubmission);
                if (response.IsSuccessStatusCode)
                {
                    await LoadTodosFromDatabase();
                    UserInput = String.Empty;
                }
                else
                {
                    Console.WriteLine("Well, thats not great.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding POSTing UserEntrySubmission to SQL: {ex.Message}");
            }
        }
    }

    private async Task UpdateTodo(UserEntryModel todo)
    {
        try
        {
            var baseUrl = Navigation.BaseUri;
            var response = await Http.PutAsJsonAsync($"{baseUrl}Todos/{todo.ID}", todo);

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Failed to update todo: {response.StatusCode}");
            }
            else
            {
                await LoadTodosFromDatabase(); // Reload the todos after update
                StateHasChanged(); // Trigger a re-render to update the UI
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating todo: {ex.Message}");
        }
    }
}
