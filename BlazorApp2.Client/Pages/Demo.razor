@page "/demo"
@rendermode InteractiveAuto
@using System.Net.Http.Json
@using BlazorApp2.Client

<PageTitle>Project Demo</PageTitle>

<div class="article">
    <div class="headingcontainer">
        <img src="/icons/projectdemo.svg" class="aboutprojectimg"/><h1>To-Do List Demo</h1>
        <h3>(@todos.Count(todo => !todo.IsDone)) Tasks Currently In Progress</h3>
    </div>
<ul>
    @foreach (var todo in todos)
        {
            <li>
                <input type="checkbox" @bind="todo.IsDone" />
                <input type="text" @bind="todo.Title" />
            </li>
        }
    </ul>
</div>

<!-- Task input kept outside of Article div for spacing -->
<input class="createTask" type="text" @bind="newTodo" />
<button @onclick="AddTodo">Create Task</button>

@code {
    private List<Todos> todos = new();
    private string newTodo = string.Empty;

    [Inject] private HttpClient Http { get; set; } = null!;
    [Inject] private NavigationManager Navigation { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadTodosFromDatabase();
    }

    private async Task LoadTodosFromDatabase()
    {
        try
        {
            // Fetch all todos from the API
            var baseUrl = Navigation.BaseUri;
            todos = await Http.GetFromJsonAsync<List<Todos>>(baseUrl + "Todos");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading todos: {ex.Message}");
        }
    }

    private async Task AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            // Create the new todo item locally temporarily
            var newTask = new Todos { Title = newTodo, IsDone = false };
            try
            {
                // Save new todo to the database
                var baseUrl = Navigation.BaseUri;
                var response = await Http.PatchAsJsonAsync(baseUrl + $"Todos/", newTask);
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Response content: {responseContent}");
                if (response.IsSuccessStatusCode)
                {
                    // Add the new task to the list only if the POST was successful
                    var createdTodo = await response.Content.ReadFromJsonAsync<Todos>();
                    todos.Add(createdTodo!);
                    newTodo = string.Empty;
                }
                else
                {
                    Console.WriteLine($"Failed to create new todo: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding todo: {ex.Message}");
            }
        }
    }

    private async Task UpdateTodo(Todos todo)
    {
        try
        {
            // Ideally, you'll need to create an "Update" API endpoint in your backend to handle updates
            // For example: PUT /Todos/{id}
            //var response = await Http.PutAsJsonAsync($"https://localhost:7251/Todos/{todo.ID}", todo);
            var baseUrl = Navigation.BaseUri;
            var response = await Http.PatchAsJsonAsync(baseUrl + $"Todos/{todo.ID}", todo);

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Failed to update todo: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating todo: {ex.Message}");
        }
    }
}
